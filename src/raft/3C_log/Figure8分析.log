初始的状态

p0(F,77) "Log:[0 1 2 3 7 8  33 44 46 51 55 60 62 69 71 77]"长16
p1(F,87) "Log:[0 1 2 3 7 11 16 26 31 38 39]" 长11
p2(F,86) "Log:[0 1 2 3 7 8  33 44 45 49 58 66 75 79 86]"长15
p3(F,87) "Log:[0 1 2 3 6 13 19 21 23 29 35 40 42]"长13
p4(F,84) "Log:[0 1 2 3 7 8  33 44 53 64 82 83 84]"长13

添加日志
[Start] p2(L,88) "Add Log:[88]"
p2(F,88) "Log:[0 1 2 3 7 8  33 44 45 49 58 66 75 79 86 88]"长16


先不谈上面那个日志的状态能不能产生(我感觉有些玄幻), 现在p2当选领导人
最终p2应该追加给其他服务器的日志是:

p2->p0 Log[8:]:[            45 49 58 66 75 79 86]
p2->p1 Log[5:]:[   8  33 44 45 49 58 66 75 79 86]
p2->p3 Log[4:]:[7  8  33 44 45 49 58 66 75 79 86]
p2->p4 Log[8:]:[            45 49 58 66 75 79 86]

让我们来看看实际上的追加更新的内容

第1轮 发送的都是88
p2->p0 Log[15:]
p2->p1 Log[15:]
p2->p3 Log[15:]
p2->p4 Log[15:]

第2轮 根据fast backup
p2->p0 Log[14:] 上一轮一致性检查的是第15个, 也就是p0的71, 那么从15开始发送
p2->p1 Log[11:] 发送[66 75 79 86], 因为被检查日志下标在p1中不存在
p2->p3 Log[13:] 下标不存在
p2->p4 Log[13:] 下标不存在

第3轮:
p2->p0 Log[13:] 
p2->p1 Log[10:]
p2->p3 Log[12:]
p2->p4 Log[12:]

第4轮:
p2->p0 Log[12:]
p2->p1 Log[9 :]
p2->p3 Log[11:]
p2->p4 Log[11:]

这个时候发现日志里领导换成了p0了, 那自然这个日志条目就丢失了, 要分析原因, 可以看到的是, 如果是上面那样的日志情况
我们要追加完所有领导人的日志需要很多次心跳消息, 如果这期间都没有更新计时器, 那么必然超时, 所以我们回顾一下在哪些时候我们需要重置选举计时

1: 收到领导者 AppendEntries RPC, 如果是任期过期的rpc消息, 那么不重置计时器
2: 正在开始选举
3: 给候选人投票后

所以一致性检查即使不通过, 也是要重置计时器的

所以现在让我们在网络可靠的情况下测试一下3C

python dtest.py 3B TestPersist13C TestPersist23C TestPersist33C TestFigure83C -n 40 -v -p 20 
python dtest.py 3A 3B TestPersist13C TestPersist23C TestPersist33C TestFigure83C -n 2000 -v -p 20